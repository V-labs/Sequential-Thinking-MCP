{
  "name": "MCP Server - Surveillance et API",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "1",
      "name": "Vérifier toutes les 5 minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$json.mcp_api_url ? $json.mcp_api_url : $node[\"Configuration MCP\"].json[\"mcp_api_url\"]}}/api/status",
        "options": {}
      },
      "id": "2",
      "name": "Vérifier statut MCP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Analyser le statut du serveur MCP\nconst statusData = $input.first().json;\n\n// Vérifier si le serveur doit être redémarré\nlet needsRestart = false;\nlet reason = '';\n\nif (!statusData.isRunning || statusData.status === 'not_configured' || \n    statusData.status === 'exited' || statusData.status === 'stopped') {\n  needsRestart = true;\n  reason = `Statut: ${statusData.status}`;\n} else if (statusData.status === 'running' && statusData.timestamp) {\n  // Vérifier si la dernière mise à jour est trop ancienne (plus de 10 minutes)\n  const lastUpdate = new Date(statusData.timestamp);\n  const now = new Date();\n  const ageInMinutes = (now - lastUpdate) / 1000 / 60;\n  \n  if (ageInMinutes > 10) {\n    needsRestart = true;\n    reason = `Dernière activité il y a ${ageInMinutes.toFixed(1)} minutes`;\n  }\n}\n\nreturn [\n  {\n    json: {\n      statusData,\n      needsRestart,\n      reason,\n      mcp_api_url: $input.first().json.mcp_api_url || $node[\"Configuration MCP\"].json[\"mcp_api_url\"]\n    }\n  }\n];"
      },
      "id": "3",
      "name": "Analyser statut",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$node[\"Analyser statut\"].json[\"needsRestart\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "4",
      "name": "Redémarrage nécessaire?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"Analyser statut\"].json[\"mcp_api_url\"]}}/api/start",
        "options": {}
      },
      "id": "5",
      "name": "Démarrer serveur MCP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1250,
        200
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://hooks.slack.com/services/{{$node[\"Configuration MCP\"].json[\"slack_webhook_id\"]}}",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "=Le serveur MCP a été redémarré. Raison: {{$node[\"Analyser statut\"].json[\"reason\"]}}"
            }
          ]
        },
        "options": {}
      },
      "id": "6",
      "name": "Notifier redémarrage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1450,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Le serveur fonctionne correctement, ne rien faire\nreturn [\n  {\n    json: {\n      status: 'OK',\n      message: 'Le serveur MCP fonctionne normalement',\n      mcp_api_url: $input.first().json.mcp_api_url\n    }\n  }\n];"
      },
      "id": "7",
      "name": "Serveur OK",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1250,
        400
      ]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 30
            }
          ]
        }
      },
      "id": "8",
      "name": "Healthcheck périodique",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        250,
        600
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$node[\"Configuration MCP\"].json[\"mcp_api_url\"]}}/api/request",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "jsonrpc",
              "value": "2.0"
            },
            {
              "name": "method",
              "value": "callTool"
            },
            {
              "name": "params",
              "value": "={ \"name\": \"sequentialthinking\", \"arguments\": { \"thought\": \"Vérification du fonctionnement du serveur\", \"thoughtNumber\": 1, \"totalThoughts\": 1, \"nextThoughtNeeded\": false } }"
            },
            {
              "name": "id",
              "value": "=healthcheck-{{Date.now()}}"
            }
          ]
        },
        "options": {}
      },
      "id": "9",
      "name": "Envoyer requête de test",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        650,
        600
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"Configuration MCP\"].json[\"mcp_api_url\"]}}/api/response/{{$node[\"Envoyer requête de test\"].json[\"requestId\"]}}",
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": true
            }
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "10",
      "name": "Attendre réponse",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        850,
        600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node[\"Attendre réponse\"].json[\"statusCode\"]}}",
              "operation": "equals",
              "value2": 404
            }
          ]
        }
      },
      "id": "11",
      "name": "Réponse reçue?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1050,
        600
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$node[\"Configuration MCP\"].json[\"mcp_api_url\"]}}/api/start",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "12",
      "name": "Redémarrer (pas de réponse)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1250,
        500
      ]
    },
    {
      "parameters": {
        "functionCode": "// Le serveur a répondu à la requête de healthcheck\nreturn [\n  {\n    json: {\n      status: 'OK',\n      message: 'Le serveur MCP a répondu à la requête de test',\n      response: $input.first().json\n    }\n  }\n];"
      },
      "id": "13",
      "name": "Serveur répond",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1250,
        700
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "mcp/sequentialthinking",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "14",
      "name": "Webhook pour requête",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Récupérer la requête depuis le webhook\nconst mcpRequest = $input.first().json;\n\n// Ajouter l'URL de l'API MCP à partir de la configuration\nconst mcp_api_url = $node[\"Configuration MCP\"].json[\"mcp_api_url\"];\n\n// Formater la requête avec jsonrpc pour le serveur MCP\nconst requestBody = {\n  jsonrpc: \"2.0\",\n  method: \"callTool\",\n  params: {\n    name: \"sequentialthinking\",\n    arguments: {\n      thought: mcpRequest.thought || \"Pensée par défaut\",\n      thoughtNumber: mcpRequest.thoughtNumber || 1,\n      totalThoughts: mcpRequest.totalThoughts || 1,\n      nextThoughtNeeded: mcpRequest.nextThoughtNeeded !== undefined ? mcpRequest.nextThoughtNeeded : false,\n      ...mcpRequest.additionalParams\n    }\n  },\n  id: mcpRequest.id || `req-${Date.now()}`\n};\n\nreturn [\n  {\n    json: {\n      formattedRequest: requestBody,\n      requestId: requestBody.id,\n      mcp_api_url\n    }\n  }\n];"
      },
      "id": "15",
      "name": "Formater requête MCP",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        450,
        900
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$node[\"Formater requête MCP\"].json[\"mcp_api_url\"]}}/api/request",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "body",
              "value": "={{$node[\"Formater requête MCP\"].json[\"formattedRequest\"]}}"
            }
          ]
        },
        "options": {}
      },
      "id": "16",
      "name": "Envoyer au serveur MCP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        650,
        900
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"Formater requête MCP\"].json[\"mcp_api_url\"]}}/api/response/{{$node[\"Formater requête MCP\"].json[\"requestId\"]}}",
        "options": {
          "response": {
            "response": {
              "fullResponse": false
            }
          }
        }
      },
      "id": "17",
      "name": "Lire réponse",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        850,
        900
      ]
    },
    {
      "parameters": {
        "functionCode": "// Formater la réponse pour le webhook\nlet responseData;\n\nif ($input.first().json.success && $input.first().json.response) {\n  responseData = $input.first().json.response;\n} else {\n  responseData = {\n    error: \"Aucune réponse valide n'a été reçue du serveur MCP\",\n    details: $input.first().json\n  };\n}\n\nreturn [\n  {\n    json: responseData\n  }\n];"
      },
      "id": "18",
      "name": "Formater réponse",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1050,
        900
      ]
    },
    {
      "parameters": {},
      "id": "19",
      "name": "Répondre au webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1250,
        900
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "mcp_api_url",
              "value": "https://mcp-api.coolify.example.com"
            },
            {
              "name": "slack_webhook_id",
              "value": "YOUR_SLACK_WEBHOOK_ID"
            }
          ]
        },
        "options": {}
      },
      "id": "20",
      "name": "Configuration MCP",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    }
  ],
  "connections": {
    "Vérifier toutes les 5 minutes": {
      "main": [
        [
          {
            "node": "Configuration MCP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vérifier statut MCP": {
      "main": [
        [
          {
            "node": "Analyser statut",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyser statut": {
      "main": [
        [
          {
            "node": "Redémarrage nécessaire?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redémarrage nécessaire?": {
      "main": [
        [
          {
            "node": "Démarrer serveur MCP",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Serveur OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Démarrer serveur MCP": {
      "main": [
        [
          {
            "node": "Notifier redémarrage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Healthcheck périodique": {
      "main": [
        [
          {
            "node": "Configuration MCP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Envoyer requête de test": {
      "main": [
        [
          {
            "node": "Attendre réponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attendre réponse": {
      "main": [
        [
          {
            "node": "Réponse reçue?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Réponse reçue?": {
      "main": [
        [
          {
            "node": "Redémarrer (pas de réponse)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Serveur répond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook pour requête": {
      "main": [
        [
          {
            "node": "Formater requête MCP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formater requête MCP": {
      "main": [
        [
          {
            "node": "Envoyer au serveur MCP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Envoyer au serveur MCP": {
      "main": [
        [
          {
            "node": "Lire réponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lire réponse": {
      "main": [
        [
          {
            "node": "Formater réponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formater réponse": {
      "main": [
        [
          {
            "node": "Répondre au webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configuration MCP": {
      "main": [
        [
          {
            "node": "Vérifier statut MCP",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Envoyer requête de test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
} 